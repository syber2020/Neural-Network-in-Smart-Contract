pragma solidity "0.8.12";
// SPDX-License-Identifier: MIT
contract activation {
    
    function sigmoid_act(int x, int y, uint a, uint b) public view returns(uint,uint ){
        uint num; uint den; uint q; uint r; 
        if(x/y>=10) {num = 1; den = 1;}
        else if((x/y)>=9 && (x/y)<10)
            {num = 99988; den = 100000;}
        else if((x/y)>=8 && (x/y)<9)
           { num = 99966; den = 100000;}
        else if((x/y)>=7 && (x/y)<8)
            {num = 99909; den = 100000;}
        else if((x/y)>=6 && (x/y)<7)
            {num = 99753; den = 100000;}
        else if((x/y)>=5 && (x/y)<6)
            {num = 99331; den = 100000;}
        else if((x/y)>=1 && (x/y)<5)
            {
            q = a/b ;
            r = a%b;
            num= (19**q)*24*(b**4);
            den= (19**q)*24*(b**4)+(7**q)*24*(b**4)-24*r*(b**3)+12*(r**2)*(b**2)-4*b*(r**3)+(r**4);}    
        else if(x/y>-1 && x/y<1)
            {
            num= 24*b**4;
            den= (48*b**4)-(24*a*b**3)+(12*a**2*b**2)-(4*b*a**3)+a**4;
            }   
        else if(x/y>-6 && x/y<=-1)
            {
            q = a/b;  r = a%b;
            // num = 24*pow(y,4)pow(7,-q);
            // den = 24*pow(y,4)*pow(7,-q)+pow(19,-q)*(24*pow(y,4)+24*r*pow(y,3)+12*pow(r,2)*pow(y,2)+4*y*pow(r,3)+pow(r,4));}
            num = (24*b**4)*(7**q);
            den = (24*b**4)*(7**q)+((24*b**4)+(24*r*b**3)+(12*r**2*b**2)+4*b*r**3+r**4)*(19**q);}
        else if(x/y>-7 && x/y<=-6)
           {num =15; den= 10000;} 
        else if(x/y>-8 && x/y<=-7)
            {num =6; den = 10000;}     
        else if(x/y>-9 && x/y<=-8)
            {num =2; den = 10000;} 
        else if(x/y>-10 && x/y<=-9)
           { num = 7; den = 100000;}
        else if(x/y<=-10)
            {num = 0 ; den =1;}
    return (num,den);
    }

    // function tanh_act(int x, int y) public returns(int,int){}
    // function relu_act() public returns(int,int){}
    // function softmax() public returns(int,int){}
    function div(int x,int y) public view returns(int,int){
        int q; int r;
        q = x/y;
        r = x%y;
        return(q,r);
    }
    // function pow(int x,int y) public view returns(int){}
}